/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import utils.Funtions;
import utils.Inlet;

/**
 *
 * @author Roger - Rp
 * @author Daniela - danielam
 * 
 */
public class MainGUI extends javax.swing.JFrame {

    /**
     * Creates new form MainGUI
     */
    public MainGUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.JLabel text_conjunto = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        mUniversal = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        mConjuntoA = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        mConjuntoB = new javax.swing.JTextField();
        insertar = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Conjuntos");

        text_conjunto.setFont(new java.awt.Font("Roboto Condensed", 0, 18)); // NOI18N
        text_conjunto.setText("Introducir Conjuntos");

        jLabel1.setFont(new java.awt.Font("Roboto Condensed", 0, 14)); // NOI18N
        jLabel1.setText("Conjunto Universal");

        mUniversal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mUniversalActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Roboto Condensed", 0, 14)); // NOI18N
        jLabel2.setText("Conjunto A");

        jLabel3.setFont(new java.awt.Font("Roboto Condensed", 0, 14)); // NOI18N
        jLabel3.setText("Conjunto B");

        insertar.setText("Insertar");
        insertar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                insertarMouseClicked(evt);
            }
        });
        insertar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insertarActionPerformed(evt);
            }
        });

        jLabel4.setText("{");

        jLabel5.setText("{");

        jLabel6.setText("{");

        jLabel7.setText("}");

        jLabel8.setText("}");

        jLabel9.setText("}");

        jLabel10.setFont(new java.awt.Font("Roboto Condensed", 0, 11)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 0, 51));
        jLabel10.setText("Los elementos tienen que estar separado por coma.");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(text_conjunto, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel3)
                                    .addComponent(insertar)
                                    .addComponent(mUniversal, javax.swing.GroupLayout.DEFAULT_SIZE, 199, Short.MAX_VALUE)
                                    .addComponent(mConjuntoA)
                                    .addComponent(mConjuntoB))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel8)
                                    .addComponent(jLabel9)
                                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 113, Short.MAX_VALUE)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel10)))))
                .addContainerGap(39, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(text_conjunto)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mUniversal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mConjuntoA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel8))
                .addGap(30, 30, 30)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(mConjuntoB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel9))
                    .addComponent(jLabel6))
                .addGap(18, 18, 18)
                .addComponent(insertar)
                .addGap(0, 49, Short.MAX_VALUE))
        );

        text_conjunto.getAccessibleContext().setAccessibleName("Conjuntos");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void mUniversalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mUniversalActionPerformed
        // TODO add your handling code here:       
    }//GEN-LAST:event_mUniversalActionPerformed

    private void insertarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insertarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_insertarActionPerformed

    private void insertarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_insertarMouseClicked
        // TODO add your handling code here:
        //coverting a cadena
        String unisersal = mUniversal.getText().toString().trim();
        String ca = mConjuntoA.getText().toString().trim();//conjunto A
        String cb = mConjuntoB.getText().toString().trim();//conjunto B
        
        //variables auxiliar para las comas
        String comaU[];
        String comaA[];     
        String comaB[];
        
        //variables que obtiene los elementos tipo cadena
        String conjuntoU[] = null;
        String conjuntoA[] = null;
        String conjuntoB[] = null;
        
        //auxiliar para deshacer los elementos globales
        int auxA[] = null;
        int auxB[] = null;       
        
        //variables para el flujo de errores
        boolean cancel = true;
        boolean errorU = false;
        boolean errorA = false;
        boolean errorB = false;
        
        
        /** __________________________ Validaciones __________________________ **/      
        
      if(unisersal.length() == 0){ //verficar si la cadena es vacia
            cancel = false;
            showMesaje("Universal no puede ir vacio.");
        }        
        
        if(ca.length() == 0){ //verficar si la cadena es vacia
            cancel = false;
            showMesaje("Conjunto A no puede ir vacio.");
        }
        
        if(cb.length() == 0){ //verficar si la cadena es vacia
            cancel = false;
            showMesaje("Conjunto B no puede ir vacio.");
        }            
        
        //verificar si el primer elemento y el ultimo es un numero 
        if(!Funtions.isNumber(Character.toString(unisersal.charAt(0))) || !Funtions.isNumber(Character.toString(unisersal.charAt(unisersal.length() - 1)))){
            cancel = false;
            showMesaje("Conjunto universal invalidos");            
        }

        //verificar si el primer elemento y el ultimo es un numero
        if(!Funtions.isNumber(Character.toString(ca.charAt(0))) || !Funtions.isNumber(Character.toString(ca.charAt(ca.length() - 1)))){
            cancel = false;
            showMesaje("Conjunto A invalidos");
        } 
        
        //verificar si el primer elemento y el ultimo es un numero
        if(!Funtions.isNumber(Character.toString(cb.charAt(0))) || !Funtions.isNumber(Character.toString(cb.charAt(cb.length() - 1)))){
            cancel = false;
            showMesaje("Conjunto B invalidos");
        }
                
        
        comaU = new String[unisersal.length()];//init
	for (int i = 0; i < unisersal.length(); i++) {
             comaU[i] = Character.toString(unisersal.charAt(i)); //convertir cada caracter en a string y meterlo en arreglo
	}        
        for (int i = 0; i < comaU.length; i++) {
            if(!comaU[i].equals(",")){ //verificar si no hay error en las comas del conjunto
                if(!Funtions.isNumber(comaU[i])){ //si no es no es una coma o un numero de lo contrario no es ninguno de los anteriores
                    errorU = true;                    
                    break;
                }
            }
        }           
        
        comaB = new String[cb.length()];//init
	for (int i = 0; i < cb.length(); i++) {
             comaB[i] = Character.toString(cb.charAt(i)); //convertir cada caracter en a string y meterlo en arreglo
	}        
        for (int i = 0; i < comaB.length; i++) {
            if(!comaB[i].equals(",")){ //verificar si no hay error en las comas del conjunto
                if(!Funtions.isNumber(comaB[i])){ //si no es no es una coma o un numero de lo contrario no es ninguno de los anteriores
                    errorB = true;
                    break;
                }
            }
        }          
        
        comaA = new String[ca.length()];//init
	for (int i = 0; i < ca.length(); i++) {
             comaA[i] = Character.toString(ca.charAt(i)); //convertir cada caracter en a string y meterlo en arreglo
	}        
        for (int i = 0; i < comaA.length; i++) {
            if(!comaA[i].equals(",")){ //verificar si no hay error en las comas del conjunto
                if(!Funtions.isNumber(comaA[i])){ //si no es no es una coma o un numero de lo contrario no es ninguno de los anteriores
                    errorA = true;
                    break;
                }
            }
        }                  
        
        if(errorU && errorA && errorB){//verificar errores de los conjuntos        
            Logger.getLogger(MainGUI.class.getName()).log(Level.INFO, "Universal Error", "");//Debug
            cancel = false;
            showMesaje("Conjuntos invalidos");
        }else{
            if(errorU && !errorA && !errorB){  //verificar errores de los conjuntos      
                Logger.getLogger(MainGUI.class.getName()).log(Level.INFO, "Universal Error", "");//Debug
                cancel = false;
                showMesaje("Introduzca un conjunto universal valido");
            }else{
                if(!errorU && errorA && !errorB){  //verificar errores de los conjuntos      
                     Logger.getLogger(MainGUI.class.getName()).log(Level.INFO, "Universal Error", "");//Debug
                     cancel = false;
                     showMesaje("Introduzca un conjunto A valido");
                 }else{
                    if(!errorU && !errorA && errorB){  //verificar errores de los conjuntos      
                         Logger.getLogger(MainGUI.class.getName()).log(Level.INFO, "Universal Error", "");//Debug
                         cancel = false;
                         showMesaje("Introduzca un conjunto B valido");
                     }else{
                        if(errorU && errorA && !errorB){//verificar errores de los conjuntos
                            cancel = false;
                            showMesaje("Introduzca un conjunto universal y A valido");
                        }else{
                            if(errorU && !errorA && errorB){//verificar errores de los conjuntos
                                cancel = false;
                                showMesaje("Introduzca un conjunto universal y B valido");
                            }else{
                                if(!errorU && errorA && errorB){//verificar errores de los conjuntos
                                    cancel = false;
                                    showMesaje("Introduzca un conjunto A y B valido");
                                }
                            }
                        }
                    }                        
                }      
            }              
        }  

         if(!errorU && !errorA && !errorB){//verificar errores de los conjuntos
            conjuntoU = unisersal.split(","); //cortar por las comas para obtener los numeros
            conjuntoA = ca.split(","); //cortar por las comas para obtener los numeros
            conjuntoB = cb.split(","); //cortar por las comas para obtener los numeros
            
            if(conjuntoU.length > 10 && conjuntoA.length > 10 && conjuntoB.length > 10){//verificar los elementos sea menor  o igual 10
                cancel = false;
                showMesaje("Introduzca conjuntos menores o igual a 10");
            }else{
                if(conjuntoU.length > 10 && conjuntoA.length < 11 && conjuntoB.length < 11){//verificar los elementos sea menor  o igual 10
                    cancel = false;
                     showMesaje("Introduzca conjuntos univesal tiene que se menor o igual a 10");
                }else{
                    if(conjuntoU.length < 11 && conjuntoA.length > 10 && conjuntoB.length < 11){//verificar los elementos sea menor  o igual 10
                        cancel = false;
                         showMesaje("Introduzca conjuntos A tiene que se menor o igual a 10");
                    }else{
                        if(conjuntoU.length < 11 && conjuntoA.length < 11 && conjuntoB.length > 10){//verificar los elementos sea menor  o igual 10
                            cancel = false;
                            showMesaje("Introduzca conjuntos B tiene que se menor o igual a 10");
                        }else{
                            if(conjuntoU.length < 11 && conjuntoA.length > 10 && conjuntoB.length > 10){//verificar los elementos sea menor  o igual 10
                                cancel = false;
                               showMesaje("Introduzca conjuntos A y B tiene que se menor o igual a 10");
                            }
                            
                        }
                    }                    
                }
            }
        }                                             
         
         
        Inlet.UNIVERSAL = new int[conjuntoU.length];//init
        
        Inlet.CONJUNTO_A = new int[conjuntoA.length];//init - tamaño del conjunto en string
        Inlet.CONJUNTO_B = new int[conjuntoB.length];//init - tamaño del conjunto en string
        
        Inlet.UNIVERSAL = Funtions.convertInt(conjuntoU);//init - convertir arreglo de string ya validado 
        
        Inlet.CONJUNTO_A = Funtions.convertInt(conjuntoA);//init - convertir arreglo de string ya validado      
        
        Inlet.AUX_CONJUNTO_A = Inlet.CONJUNTO_A;//usada solo para la potencia
        
        Inlet.CONJUNTO_B = Funtions.convertInt(conjuntoB); //init - convertir arreglo de string ya validado
        
        
        //ordenar los conjuntos
        Inlet.UNIVERSAL = Funtions.ordenarConjunto(Inlet.UNIVERSAL);
        Inlet.CONJUNTO_A = Funtions.ordenarConjunto(Inlet.CONJUNTO_A);
        Inlet.CONJUNTO_B = Funtions.ordenarConjunto(Inlet.CONJUNTO_B);
        
        
        if(Repeat(Inlet.UNIVERSAL)){//verificar si no hay elementos repetidos
            cancel = false;
            showMesaje("Elementos repetidos en el conjunto universal");
        } 
         
        if(Repeat(Inlet.CONJUNTO_A)){//verificar si no hay elementos repetidos
            cancel = false;
            showMesaje("Elementos repetidos en el conjunto A");
        } 
        
        if(Repeat(Inlet.CONJUNTO_B)){//verificar si no hay elementos repetidos
            cancel = false;
            showMesaje("Elementos repetidos en el conjunto B");
        }        
        
        
      if(Funtions.comparar(Inlet.CONJUNTO_A, Inlet.UNIVERSAL)){//comparar que los elementos de A esta en el universal
            cancel = false;
            showMesaje("Por favor los numeros de conjunto 'A' no el estan en universal");
            System.err.println("Por favor los elementos de conjunto 'A' no el estan en universal");
      }        
        
      if(Funtions.comparar(Inlet.CONJUNTO_B, Inlet.UNIVERSAL)){//comparar que los elementos de B esta en el universal
            cancel = false;
            showMesaje("Por favor los elementos de conjunto 'B' no el estan en universal");
      }                
                                  
        /** __________________________ Validaciones __________________________ **/                                
      
      
      
        if(cancel){//validaciones lista
            
            auxA = new int[Inlet.UNIVERSAL.length];//init
            auxB = new int[Inlet.UNIVERSAL.length];//init

            Funtions.initialize(auxA);//llenar el arreglo a 0
            Funtions.initialize(auxB);//llenar el arreglo a 0

              for (int i = 0; i <  Inlet.CONJUNTO_A.length; i++){//meter los elementos de A a su auxiliar(A{1,2} -auxA{1,2,0,0} depende de la cantidad del universal)
                  auxA[i] = Inlet.CONJUNTO_A[i];
              }
              for (int j = 0; j <  Inlet.CONJUNTO_B.length; j++){//meter los elementos de A a su auxiliar(B{3,4} -auxB{0,0,3,4} depende de la cantidad del universal)
                  auxB[j] = Inlet.CONJUNTO_B[j];
              }           

              //reiniciar variables
              Inlet.CONJUNTO_A = null;
              Inlet.CONJUNTO_A = new int[Inlet.UNIVERSAL.length];
              Inlet.CONJUNTO_B = null;
              Inlet.CONJUNTO_B = new int[Inlet.UNIVERSAL.length];        

              //iniciar de nuevos los conjuntos
              /**
               * Ejemplos
               * Universal[1,2,3,4] tamaño 4
               * A[1,2} tamaño 2
               * B[3,4] tamaño 2
               * 
               * reiniciar AyB
               * A[0,0,0,0] depende del tamaño de universal,4
               * B[0,0,0,0] depende del tamaño de universal,4
               * 
               * iniciar
               * A[1,2,0,0]
               * B[0,0,3,4]
               * 
               */
              
              //iniciar - Seguir el ejemplo de arriba
              Inlet.CONJUNTO_A = auxA;
              Inlet.CONJUNTO_B = auxB;              
              Inlet.CONJUNTO_A = Funtions.insertarConjunto(Inlet.CONJUNTO_A, Inlet.UNIVERSAL);//nuevo valores
              Inlet.CONJUNTO_B = Funtions.insertarConjunto(Inlet.CONJUNTO_B, Inlet.UNIVERSAL);//nuevo valores

              //venatanas de operaciones
              new MenuOperacionGUI().setVisible(true);
        }                
    }//GEN-LAST:event_insertarMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainGUI().setVisible(true);
            }
        });
    }
  
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton insertar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JTextField mConjuntoA;
    private javax.swing.JTextField mConjuntoB;
    private javax.swing.JTextField mUniversal;
    // End of variables declaration//GEN-END:variables

    private void showMesaje(String text){//mostrar dialog mensaje
        JOptionPane.showMessageDialog(null, text);
    }     
    
    public boolean Repeat(int[] array) {//verificar si hay una elemento repetido
        int cont = 0;
	for(int i = 0; i <array.length ;i++){
            for(int j = 0 ; j < array.length-1; j++){
		if(i != j){
                    if(array[i] == array[j]){
                        cont++;
		    }
		}
            }
        }
        return cont > 0 ? true : false;
    }       
    
}//end
